var _user$project$State$nextid = F2(
	function (i, cap) {
		return (_elm_lang$core$Native_Utils.cmp(i, cap - 1) < 0) ? (i + 1) : 0;
	});
var _user$project$State$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'MorePlease':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Service$getPosts};
			case 'FetchSucceed':
				var _p1 = _p0._0;
				var logga = A2(_elm_lang$core$Debug$log, 'succes', _p1);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{posts: _p1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchFail':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'UpdateTopic':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{topic: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetPost':
				var nylista = A2(
					_elm_lang$core$List$filter,
					function (p) {
						return _elm_lang$core$Native_Utils.eq(p.id, _p0._0);
					},
					model.posts);
				var mabynewpost = _elm_lang$core$List$head(nylista);
				var newpost = A2(
					_elm_lang$core$Maybe$withDefault,
					model.post,
					_elm_lang$core$List$head(nylista));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{post: newpost}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var posts = _elm_lang$core$Array$fromList(model.posts);
				var postlength = _elm_lang$core$List$length(model.posts);
				var indexid = A2(_user$project$State$nextid, model.postindex, postlength);
				var post = A2(
					_elm_lang$core$Maybe$withDefault,
					model.post,
					A2(_elm_lang$core$Array$get, indexid, posts));
				var updateInterval = 3;
				var willupdate = _elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], model.counter, updateInterval),
					0);
				return willupdate ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{counter: model.counter + 1, post: post, postindex: indexid}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{counter: model.counter + 1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$State$initialModel = function (topic) {
	return {
		topic: topic,
		gifUrl: '',
		posts: _elm_lang$core$Native_List.fromArray(
			[_user$project$Data$p1, _user$project$Data$p2, _user$project$Data$p3]),
		post: _user$project$Data$p1,
		counter: 0,
		postindex: 0
	};
};
var _user$project$State$init = function (topic) {
	return {
		ctor: '_Tuple2',
		_0: _user$project$State$initialModel(topic),
		_1: _user$project$Service$getPosts
	};
};
